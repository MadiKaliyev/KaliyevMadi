# Сортировка
# При выполнении практической работы, основной алгоритм решения задачи должен быть
# описан в виде функции, получающей в качестве параметра список (а также, возможно, и
# дополнительные параметры).
# 2
# 1. Системный администратор вспомнил, что давно не делал архива пользовательских
# файлов. Однако, объем диска, куда он может поместить архив, может быть меньше чем
# суммарный объем архивируемых файлов.
# Известно, какой объем занимают файлы каждого пользователя.
# Напишите программу, которая по заданной информации о пользователях и свободному
# объему на архивном диске определит максимальное число пользователей, чьи данные можно
# поместить в архив, при этом используя свободное место как можно более полно.
# Программа получает на вход в одной строке число S размер свободного места на диске, и
# число N — количество пользователей, после этого идет N чисел — объем данных каждого
# пользователя, записанных каждое в отдельной строке.
# Выведите наибольшее количество пользователей, чьи данные могут быть помешены
#
def max_users_for_archive(free_space, users_data):
    users_data.sort()
    total_users = 0
    total_data = 0
    for data in users_data:
        if total_data + data <= free_space:
            total_data += data
            total_users += 1

    return total_users

# Получаем данные от пользователя
input_data = int(input("Введите размер свободного места и количество пользователей: "))
num_users = int(input("Введите число пользователей: "))

users_data = []
for i in range(num_users):
    data = int(input(f"Введите объем данных пользователя {i + 1}: "))
    users_data.append(data)

result = max_users_for_archive(input_data, users_data)
print("Максимальное количество пользователей, чьи данные можно поместить в архив:", result)
